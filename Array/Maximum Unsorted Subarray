

You are given an array (zero indexed) of N non-negative integers, A0, A1 ,…, AN-1.
Find the minimum sub array Al, Al+1 ,…, Ar so if we sort(in ascending order) that sub array, then the whole array should get sorted.
If A is already sorted, output -1.

Example :

Input 1:

A = [1, 3, 2, 4, 5]

Return: [1, 2]

Input 2:

A = [1, 2, 3, 4, 5]

Return: [-1]

In the above example(Input 1), if we sort the subarray A1, A2, then whole array A should get sorted.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

vector<int> Solution::subUnsort(vector<int> &A) {
    vector <int> v = A;
    sort(v.begin(),v.end());
    int start=-1,end=-1;
    
    for(int i=0;i<A.size();i++){
        if(A[i] != v[i]){
            if(start==-1){
                start = i;
            }else{
                end = max(end , i);
            }
        }
    }
    vector<int> ans;
    ans.push_back(start);
    
    if(end !=-1){
        ans.push_back(end);
    }
    
    return ans;
    
    
    //------Another solution ------------------
    
    
    int start = 0 , maxNumber = INT_MIN , minNumber = INT_MAX;
    int n = A.size();
    int end =n-1;
    vector<int> ans;
    int i=0 , j=n-1;
    while(start<n-1 && A[start] <= A[start+1]){
        start++;
    }
    
    //Array is sorted
    if(start == n-1 || n<=1){
        ans.push_back(-1);
        return ans;
    }
    
    while(end >0 && A[end] >= A[end-1]){
        end--;
    }
    
    for(int i=start;i<=end;i++){
        maxNumber = max(maxNumber , A[i]);
        minNumber = min(minNumber , A[i]);
    }
    
    int leftAns =0 , rightAns = n-1;
    while(leftAns <=start && A[leftAns] <= minNumber){
        leftAns++;
    }
    
    while(rightAns >=end && A[rightAns] >=maxNumber){
        rightAns--;
    }
    ans.push_back(leftAns);
    ans.push_back(rightAns);
    return ans;
}
