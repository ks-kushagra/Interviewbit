
There is a corridor in a Jail which is N units long. Given an array A of size N. The ith index of this array is 0 if the light at ith position is faulty otherwise it is 1.

All the lights are of specific power B which if is placed at position X, it can light the corridor from [ X-B+1, X+B-1].

Initially all lights are off.

Return the minimum number of lights to be turned ON to light the whole corridor or -1 if the whole corridor cannot be lighted.



Problem Constraints
1 <= N <= 100000

1 <= B <= 10000



Input Format
First argument is an integer array A where A[i] is either 0 or 1.

Second argument is an integer B.



Output Format
Return the minimum number of lights to be turned ON to light the whole corridor or -1 if the whole corridor cannot be lighted.


Example Input
Input 1:

A = [ 0, 0, 1, 1, 1, 0, 0, 1].
B = 3
Input 2:

A = [ 0, 0, 0, 1, 0].
B = 3


Example Output
Output 1:

2
Output 2:

-1


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**

0 0 1 1 1 0 0 1
n=8
B=3 (B-1 = 2)

i - (B-1) , i + (B-1)

start from right 
ans check whether any light present in [n-1-(B-1) , n-1]

if no , then ans is -1

if yes , then light left most light

now jump to left of [left most light that just lightened up]

Do this , untill you reach start of corridor

1 0 1 0 0 1 1 1 0 1 0 0 1 1 0 0 1
                  Y     Y  Y    Y            

B = 2 (1)
*/
int Solution::solve(vector<int> &A, int B) {
    // [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15]
    // [ 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0 ]
    // 4
    int count = 0;
    int n = A.size();//16
    int i = n-1;//15
    
    while(i>=0){//15,9
        int bulb_present = 0;
        int j = i-B+1;//12,6,-1
        if(j <0 && A[i] == 1){
            count++;
            break;
        }
        
        while(j>=0 && j<=i){
            if(A[j] == 1){//13,6
                count++;//1,2
                i= j - B;// 2
                bulb_present=1;
                break;
            }
            j++;
        }
        
        if(!bulb_present){
            for(int k = i;k<=i+B-1;k++){
                if(A[k] == 1){
                    count++;
                    i = k - B;
                    bulb_present = 1;
                    break;
                }
            }
            if(!bulb_present)
            return -1;
        }
    }
    return count;
    
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int Solution::solve(vector<int> &A, int B) {
    
    int n = A.size();
    
    int curr=0;
    int ans =0;
    while(curr<n){
        int flag = 0;
        for(int j = curr+B-1 ; j >= max(0 , curr - B +1);j--){
            if(A[j] == 1){
                flag =1;
                curr = j + B;
                break;
            }
        }
        
        if(flag){
            ans++;
        }else{
            return -1;
        }
    }
    return ans;
}
