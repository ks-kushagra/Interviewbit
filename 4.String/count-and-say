
The count-and-say sequence is the sequence of integers beginning as follows:

1, 11, 21, 1211, 111221, ...

1 is read off as one 1 or 11.
11 is read off as two 1s or 21.

21 is read off as one 2, then one 1 or 1211.

Given an integer n, generate the nth sequence.

Note: The sequence of integers will be represented as a string.

Example:

if n = 2,
the sequence is 11.

    
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

string nextSequenece(string A){
    int n = A.length();
    if(n==0){
        return A;
    }
    stack<pair<char , int>> s;
    string ans ="";
    for(int i=0;i<n;i++){
        if(!s.empty() && s.top().first == A[i]){
            s.top().second++;
        }else{
            s.push({A[i],1});
        }
    }

    while(!s.empty()){
        auto top = s.top();
        s.pop();
        ans = (std::to_string(top.second) + top.first) + ans;
    }
    return ans;
}
string Solution::countAndSay(int A) {
    if(A==0){
        return "";
    }
    string ans = "1";
    for(int i=2;i<=A;i++){
        ans = nextSequenece(ans);
    }
    return ans;
}

_______________________________________________________________________________________________________________________________________


string Solution::countAndSay(int A) {
    if(A==1)
        return "1";
    if(A==2)
        return "11";
    string str="11";
    for(int i=3;i<=A;i++){
        str+='$';  // z value algo
        int len=str.length();
        int c=1;
        string tmp="";
        for(int j=1;j<len;j++){
            if(str[j]!=str[j-1]){
                tmp+=c+'0';
                tmp+=str[j-1];
                c=1;
            }
            else
                c++;
        }
        str=tmp;
    }
    return str;
}
