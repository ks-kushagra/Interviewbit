Given a collection of intervals, merge all overlapping intervals.

For example:

Given [1,3],[2,6],[8,10],[15,18],

return [1,6],[8,10],[15,18].

Make sure the returned intervals are sorted

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
bool compare(const Interval &a, const Interval &b){
    if(a.start == b.start){
        return a.end<b.end;
    }
    
    return a.start < b.start;
}
vector<Interval> Solution::merge(vector<Interval> &A) {
    int n = A.size();
    vector<Interval> ans;
    int i=0;
    sort(A.begin(),A.end(),compare);
    while(i<n-1){
        if(A[i].end < A[i+1].start){
            ans.push_back(A[i]);
            i++;
        }else{
            //A[i].end >= A[i+1].start
            int j =i+1;
            while(j < n && A[i].end >= A[j].start){
                A[i].start = min(A[i].start , A[j].start);
                A[i].end = max(A[i].end , A[j].end);
                j++;
            }
            ans.push_back(A[i]);
            i=j;
        }
    }
    
    if(i == n-1){
        ans.push_back(A[i]);
    }
    
    return ans;
}
