Given an array A containing N integers.

You need to find the maximum sum of triplet ( Ai + Aj + Ak ) such that 0 <= i < j < k < N and Ai < Aj < Ak.

If no such triplet exist return 0.



Problem Constraints
3 <= N <= 105.

1 <= A[i] <= 108.



Input Format
First argument is an integer array A.



Output Format
Return a single integer denoting the maximum sum of triplet as described in the question.



Example Input
Input 1:

 A = [2, 5, 3, 1, 4, 9]
Input 2:

 A = [1, 2, 3]


Example Output
Output 1:

 16
Output 2:

 6


Example Explanation
Explanation 1:

 All possible triplets are:-
    2 3 4 => sum = 9
    2 5 9 => sum = 16
    2 3 9 => sum = 14
    3 4 9 => sum = 16
    1 4 9 => sum = 14
  Maximum sum = 16
Explanation 2:

 All possible triplets are:-
    1 2 3 => sum = 6
 Maximum sum = 6
 
 
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------
 
// Utility function to get the lower last min
// value of 'n'
int getLowValue(set<int>& lowValue, int& n)
{
    auto it = lowValue.lower_bound(n);
 
    // Since 'lower_bound' returns the first
    // iterator greater than 'n', thus we
    // have to decrement the pointer for
    // getting the minimum value
    --it;
 
    return (*it);
}
 
int Solution::solve(vector<int> &A) {
    
    
    int n = A.size();
    if(n<3){
        return 0;
    }    
 
 long long int ans= 0;
 /*
 for(int j=1;j<n-1;j++){
     
     int maxInLeft = 0 , maxInRight=0;
     
     for(int i=0;i<=j-1;i++){
         if(A[i]<A[j]){
             maxInLeft = max(maxInLeft , A[i]);
         }
     }
     
     for(int k=j+1;k<n;k++){
         if(A[j]<A[k]){
             maxInRight = max(maxInRight , A[k]);
         }
     }
     
     if(maxInLeft && maxInRight){
     ans = max(ans ,(long long int) (maxInLeft + A[j] + maxInRight));
     }
 }
 */
 
 //Above solution works with time complexity O(n^2)
 
 
 
 //-------------------------------------------------------------------------------------
 
 //Solution 2
 
 
 vector<int> maxSuffixArray(n+1,0);
 
 for(int i=n-1;i>=0;i--){
     maxSuffixArray[i] = max(maxSuffixArray[i+1] , A[i]);
 }
 
    set<int> lowValue;
    lowValue.insert(INT_MIN);
    
  for (int j = 0; j < n - 1; ++j) {
        if (maxSuffixArray[j + 1] > A[j]) {
            ans = max(ans, (long long int ) getLowValue(lowValue,A[j])+ A[j] + maxSuffixArray[j + 1]);
 
            // Insert arr[i] in set<> for further
            // processing
            lowValue.insert(A[j]);
        }
    }
    return ans;
}
