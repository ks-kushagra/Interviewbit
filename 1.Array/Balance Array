int Solution::solve(vector<int> &A) {
    
    int n = A.size();
    
    if(n <=1){
        return n;
    }
    
    vector<int> evenSum(n),oddSum(n);
    int count =0;
    evenSum[0]=A[0],oddSum[0]=0;
    //pre-computation
    for(int i=1;i<n;i++){
        if(i%2 == 0){
            evenSum[i] = evenSum[i-1]+A[i];
            oddSum[i] = oddSum[i-1];
        }else{
            oddSum[i] = oddSum[i-1]+A[i];
            evenSum[i]=evenSum[i-1];
        }
    }
    
    for(int i=0;i<n;i++){
        int tempEvenSum,tempOddSum;
        if(i%2==0){
            //evenSum = EvenSum(till i) - A[i] + (OddSum (from i+1 - n)
            tempEvenSum = (evenSum[i]-A[i]) + (oddSum[n-1] - oddSum[i]);
            //oddSum = oddSum(till i) + evenSum( i+1->n)
            tempOddSum =  (oddSum[i]) + (evenSum[n-1]-evenSum[i]);
        }else{
            //oddSum = oddSum(till i) - A[i] + (evenSum (from i+1 - n)
            tempOddSum = (oddSum[i] - A[i]) + (evenSum[n-1]-evenSum[i]);
            //evenSum = evenSum(till i) + oddSum( i+1->n)
            tempEvenSum = (evenSum[i]) + (oddSum[n-1]-oddSum[i]);
        }
        
        if(tempEvenSum == tempOddSum){
            count++;
        }
    }
    
    return count;
}
